{
	"info": {
		"_postman_id": "1fc4dbab-da80-46fa-8ee1-b2e25fdbc07e",
		"name": "TCSS 460 Movie API",
		"description": "RESTful API for movies",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46264729"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 200",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test: Response time should be less than 500ms",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Test: Response should be JSON",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"// Test: Response body should contain message property",
									"pm.test('Response has message property', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"// Test: Message should indicate database is working",
									"pm.test('Message indicates database is working', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal('Database is working!');",
									"});",
									"",
									"// Test: Response body structure is correct",
									"pm.test('Response body structure is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(Object.keys(jsonData).length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"health"
							]
						},
						"description": "Check if the database connection is working properly"
					},
					"response": [
						{
							"name": "Health Check - Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/health",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "34"
								},
								{
									"key": "ETag",
									"value": "W/\"22-AIVWmqB8/mwIWIXOmV2FXpMU8Aw\""
								},
								{
									"key": "Date",
									"value": "Sun, 19 Oct 2025 08:33:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Database is working!\"\n}"
						}
					]
				}
			],
			"description": "Health check endpoints for monitoring database connectivity"
		},
		{
			"name": "Movies",
			"item": [
				{
					"name": "Get All Movies - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 200",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test: Response time should be acceptable",
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"// Test: Response should be JSON",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"// Test: Response should be an array",
									"pm.test('Response is an array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// Test: Array should contain movie objects",
									"pm.test('Array contains movie objects', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.be.an('object');",
									"    }",
									"});",
									"",
									"// Test: Each movie should have required properties",
									"pm.test('Each movie has required properties', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const movie = jsonData[0];",
									"        pm.expect(movie).to.have.property('title');",
									"        pm.expect(movie).to.have.property('original_title');",
									"        pm.expect(movie).to.have.property('director_name');",
									"        pm.expect(movie).to.have.property('genre_name');",
									"        pm.expect(movie).to.have.property('release_date');",
									"        pm.expect(movie).to.have.property('runtime_minutes');",
									"        pm.expect(movie).to.have.property('overview');",
									"        pm.expect(movie).to.have.property('budget');",
									"        pm.expect(movie).to.have.property('revenue');",
									"    }",
									"});",
									"",
									"// Test: Property types are correct",
									"pm.test('Movie properties have correct types', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const movie = jsonData[0];",
									"        pm.expect(movie.title).to.be.a('string');",
									"        pm.expect(movie.original_title).to.be.a('string');",
									"        pm.expect(movie.director_name).to.be.a('string');",
									"        pm.expect(movie.genre_name).to.be.a('string');",
									"        pm.expect(movie.overview).to.be.a('string');",
									"    }",
									"});",
									"",
									"// Test: Numeric fields are valid",
									"pm.test('Numeric fields are valid', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const movie = jsonData[0];",
									"        if (movie.runtime_minutes !== null) {",
									"            pm.expect(movie.runtime_minutes).to.be.a('number');",
									"            pm.expect(movie.runtime_minutes).to.be.above(0);",
									"        }",
									"        if (movie.budget !== null) {",
									"            pm.expect(movie.budget).to.be.a('number');",
									"        }",
									"        if (movie.revenue !== null) {",
									"            pm.expect(movie.revenue).to.be.a('number');",
									"        }",
									"    }",
									"});",
									"",
									"// Store first movie for later tests",
									"const jsonData = pm.response.json();",
									"if (jsonData.length > 0) {",
									"    pm.collectionVariables.set('sampleMovieTitle', jsonData[0].title);",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							]
						},
						"description": "Retrieve all movies without any filters"
					},
					"response": []
				},
				{
					"name": "Get Movies by Year - Valid Year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 200",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test: Response should be an array",
									"pm.test('Response is an array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// Test: All movies should be from the requested year",
									"pm.test('All movies are from year 2020', function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(movie => {",
									"        const releaseYear = new Date(movie.release_date).getFullYear();",
									"        pm.expect(releaseYear).to.equal(2020);",
									"    });",
									"});",
									"",
									"// Test: Each movie has all required fields",
									"pm.test('Each movie has complete data', function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(movie => {",
									"        pm.expect(movie).to.have.property('title');",
									"        pm.expect(movie).to.have.property('director_name');",
									"        pm.expect(movie).to.have.property('genre_name');",
									"        pm.expect(movie).to.have.property('release_date');",
									"    });",
									"});",
									"",
									"// Test: Response time is acceptable",
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies?year=2020",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "year",
									"value": "2020",
									"description": "Filter by release year"
								}
							]
						},
						"description": "Retrieve movies filtered by a specific release year (2020)"
					},
					"response": []
				},
				{
					"name": "Get Movies by Year - Another Valid Year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 200",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test: Response should be an array",
									"pm.test('Response is an array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// Test: All movies should be from 1994",
									"pm.test('All movies are from year 1994', function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(movie => {",
									"        const releaseYear = new Date(movie.release_date).getFullYear();",
									"        pm.expect(releaseYear).to.equal(1994);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies?year=1994",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "year",
									"value": "1994"
								}
							]
						},
						"description": "Retrieve movies from 1994"
					},
					"response": []
				},
				{
					"name": "Get Movies - Invalid Year (String)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 400 Bad Request",
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test: Response should be JSON",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"// Test: Response should contain error property",
									"pm.test('Response contains error property', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});",
									"",
									"// Test: Error message should indicate invalid year",
									"pm.test('Error message indicates invalid year parameter', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.equal('Invalid year parameter');",
									"});",
									"",
									"// Test: Response time is acceptable",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies?year=invalid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "year",
									"value": "invalid",
									"description": "Invalid year parameter"
								}
							]
						},
						"description": "Test error handling with invalid year parameter (non-numeric string)"
					},
					"response": []
				},
				{
					"name": "Get Movies - Invalid Year (Special Characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 400 Bad Request",
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test: Response contains error property",
									"pm.test('Response contains error property', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});",
									"",
									"// Test: Error message is correct",
									"pm.test('Error message indicates invalid year parameter', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.equal('Invalid year parameter');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies?year=20@%23",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "year",
									"value": "20@%23"
								}
							]
						},
						"description": "Test error handling with special characters in year parameter"
					},
					"response": []
				},
				{
					"name": "Get Movies - Year with Decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 400 Bad Request",
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test: Response contains error",
									"pm.test('Response contains error property', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies?year=2020.5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "year",
									"value": "2020.5"
								}
							]
						},
						"description": "Test error handling with decimal year value"
					},
					"response": []
				},
				{
					"name": "Get Movies - Empty Year Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Should return all movies (empty parameter ignored)",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test: Response is an array",
									"pm.test('Response is an array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies?year=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "year",
									"value": ""
								}
							]
						},
						"description": "Test behavior with empty year parameter"
					},
					"response": []
				},
				{
					"name": "Get Movies - Future Year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 200",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test: Response is an array (may be empty)",
									"pm.test('Response is an array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// Test: Array may be empty for future years",
									"pm.test('Response may be empty for future year', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies?year=2030",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "year",
									"value": "2030"
								}
							]
						},
						"description": "Test query with future year (should return empty array or future releases)"
					},
					"response": []
				},
				{
					"name": "Get Movies - Very Old Year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 200",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test: Response is an array",
									"pm.test('Response is an array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies?year=1920",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "year",
									"value": "1920"
								}
							]
						},
						"description": "Test query with very old year"
					},
					"response": []
				},
				{
					"name": "Get Movies - Performance Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 200",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test: Response time for performance",
									"pm.test('Response time is acceptable (less than 1500ms)', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"// Test: Memory efficiency - response size",
									"pm.test('Response size is reasonable', function () {",
									"    const responseSize = pm.response.size();",
									"    pm.expect(responseSize).to.be.below(10000000); // Less than 10MB",
									"});",
									"",
									"// Log performance metrics",
									"console.log('Response Time:', pm.response.responseTime + 'ms');",
									"console.log('Response Size:', pm.response.size() + ' bytes');"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/movies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							]
						},
						"description": "Performance test for retrieving all movies"
					},
					"response": []
				}
			],
			"description": "Movie-related endpoints for retrieving movie data"
		},
		{
			"name": "API Info",
			"item": [
				{
					"name": "Get API Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Response status should be 200",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test: Response should be JSON",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"// Test: Response has all required properties",
									"pm.test('Response has all required properties', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('documentation');",
									"});",
									"",
									"// Test: Property values are correct",
									"pm.test('API info values are correct', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.equal('TCSS 460 API');",
									"    pm.expect(jsonData.version).to.equal('1.0.0');",
									"    pm.expect(jsonData.description).to.equal('RESTful API for movies');",
									"    pm.expect(jsonData.documentation).to.equal('/api-docs');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/api-info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"api-info"
							]
						},
						"description": "Get API metadata and information"
					},
					"response": [
						{
							"name": "Get API Info",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/api-info",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"api-info"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "108"
								},
								{
									"key": "ETag",
									"value": "W/\"6c-9Zqs8eu1jpUo0cIq07XkvEU9+oE\""
								},
								{
									"key": "Date",
									"value": "Sun, 19 Oct 2025 08:28:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"TCSS 460 API\",\n    \"version\": \"1.0.0\",\n    \"description\": \"RESTful API for movies\",\n    \"documentation\": \"/api-docs\"\n}"
						}
					]
				}
			],
			"description": "API information and metadata endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					"// Global pre-request script",
					"console.log('Starting request to:', pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					"// Global test script - runs after every request",
					"",
					"// Test: Response should not have server errors (5xx)",
					"pm.test('No server errors (5xx)', function () {",
					"    pm.expect(pm.response.code).to.be.below(500);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		},
		{
			"key": "sampleMovieTitle",
			"value": ""
		},
		{
			"key": "hostUrl",
			"value": ""
		}
	]
}