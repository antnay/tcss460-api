{
	"info": {
		"_postman_id": "1c355971-f912-47d3-9081-d3d40569d8c5",
		"name": "Movie Database API",
		"description": "Complete API testing suite with API key authentication. Generate an API key first, then use it to access protected endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46264729"
	},
	"item": [
		{
			"name": "System",
			"item": [
				{
					"name": "API Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response contains API info fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api-info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains health status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Health check responds quickly (< 200ms)\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API Key Management",
			"item": [
				{
					"name": "Get API Key Form (HTML)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test(\"Response contains HTML form\", function () {",
									"    pm.expect(pm.response.text()).to.include('<form');",
									"    pm.expect(pm.response.text()).to.include('Generate API Key');",
									"});",
									"",
									"pm.test(\"Form has name input field\", function () {",
									"    pm.expect(pm.response.text()).to.include('name=\"name\"');",
									"});",
									"",
									"pm.test(\"Form has email input field\", function () {",
									"    pm.expect(pm.response.text()).to.include('name=\"email\"');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api-key",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains API key\", function () {",
									"    pm.expect(jsonData).to.have.property('api_key');",
									"    pm.expect(jsonData.api_key).to.be.a('string');",
									"    pm.expect(jsonData.api_key.length).to.be.at.least(32);",
									"});",
									"",
									"pm.test(\"Response contains name\", function () {",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.equal('Test Application');",
									"});",
									"",
									"pm.test(\"Response contains email\", function () {",
									"    pm.expect(jsonData).to.have.property('email');",
									"});",
									"",
									"pm.test(\"Response contains rate_limit\", function () {",
									"    pm.expect(jsonData).to.have.property('rate_limit');",
									"    pm.expect(jsonData.rate_limit).to.be.a('number');",
									"    pm.expect(jsonData.rate_limit).to.be.at.least(1);",
									"});",
									"",
									"pm.test(\"Response contains created_at timestamp\", function () {",
									"    pm.expect(jsonData).to.have.property('created_at');",
									"    pm.expect(new Date(jsonData.created_at)).to.be.a('date');",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('success');",
									"});",
									"",
									"pm.test(\"Response contains important notice\", function () {",
									"    pm.expect(jsonData).to.have.property('important_notice');",
									"    pm.expect(jsonData.important_notice).to.include('SAVE');",
									"});",
									"",
									"// Save the API key for use in other requests",
									"if (jsonData.api_key) {",
									"    pm.collectionVariables.set('apiKey', jsonData.api_key);",
									"    console.log('âœ… API Key saved:', jsonData.api_key.substring(0, 20) + '...');",
									"}",
									"",
									"pm.test(\"Response time is reasonable (< 2000ms)\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Application\",\n  \"email\": \"test@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api-key",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate API Key - Missing Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response indicates validation error\", function () {",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api-key",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate API Key - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response contains validation error\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Application\",\n  \"email\": \"invalid-email\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api-key",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API Key Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains api_key_info object\", function () {",
									"    pm.expect(jsonData).to.have.property('api_key_info');",
									"    pm.expect(jsonData.api_key_info).to.be.an('object');",
									"});",
									"",
									"pm.test(\"API key info contains required fields\", function () {",
									"    const info = jsonData.api_key_info;",
									"    pm.expect(info).to.have.property('name');",
									"    pm.expect(info).to.have.property('rate_limit');",
									"    pm.expect(info).to.have.property('created_at');",
									"});",
									"",
									"pm.test(\"Name matches generated key\", function () {",
									"    pm.expect(jsonData.api_key_info.name).to.equal('Test Application');",
									"});",
									"",
									"pm.test(\"Rate limit is a positive number\", function () {",
									"    pm.expect(jsonData.api_key_info.rate_limit).to.be.a('number');",
									"    pm.expect(jsonData.api_key_info.rate_limit).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Created timestamp is valid\", function () {",
									"    pm.expect(new Date(jsonData.api_key_info.created_at)).to.be.a('date');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api-key/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-key",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API Key Info - No Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api-key/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-key",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API Key Info - Invalid Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response indicates invalid key\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "invalid-key-12345",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api-key/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-key",
								"info"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Movies - GET",
			"item": [
				{
					"name": "Get All Movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response contains data array\", function () {",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response contains pagination meta\", function () {",
									"    pm.expect(jsonData).to.have.property('meta');",
									"    pm.expect(jsonData.meta).to.have.property('page');",
									"    pm.expect(jsonData.meta).to.have.property('limit');",
									"    pm.expect(jsonData.meta).to.have.property('total');",
									"    pm.expect(jsonData.meta).to.have.property('pages');",
									"    pm.expect(jsonData.meta).to.have.property('hasNextPage');",
									"    pm.expect(jsonData.meta).to.have.property('hasPreviousPage');",
									"});",
									"",
									"pm.test(\"Pagination meta has correct data types\", function () {",
									"    pm.expect(jsonData.meta.page).to.be.a('number');",
									"    pm.expect(jsonData.meta.limit).to.be.a('number');",
									"    pm.expect(jsonData.meta.total).to.be.a('number');",
									"    pm.expect(jsonData.meta.pages).to.be.a('number');",
									"    pm.expect(jsonData.meta.hasNextPage).to.be.a('boolean');",
									"    pm.expect(jsonData.meta.hasPreviousPage).to.be.a('boolean');",
									"});",
									"",
									"if (jsonData.data.length > 0) {",
									"    const movie = jsonData.data[0];",
									"    ",
									"    pm.test(\"Movie object has required fields\", function () {",
									"        pm.expect(movie).to.have.property('title');",
									"        pm.expect(movie).to.have.property('release_date');",
									"        pm.expect(movie).to.have.property('runtime_minutes');",
									"    });",
									"    ",
									"    if (movie.movie_id) {",
									"        pm.collectionVariables.set('testMovieId', movie.movie_id.toString());",
									"    }",
									"}",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/movies?page=1&limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Movies - No API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains error about missing API key\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('api key');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/movies?page=1&limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is a movie object\", function () {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.not.be.an('array');",
									"});",
									"",
									"pm.test(\"Movie has required fields\", function () {",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('original_title');",
									"    pm.expect(jsonData).to.have.property('release_date');",
									"    pm.expect(jsonData).to.have.property('runtime_minutes');",
									"    pm.expect(jsonData).to.have.property('overview');",
									"});",
									"",
									"pm.test(\"Movie fields have correct data types\", function () {",
									"    pm.expect(jsonData.title).to.be.a('string');",
									"    pm.expect(jsonData.runtime_minutes).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/movies/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect([200, 404]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response has data and meta\", function () {",
									"        pm.expect(jsonData).to.have.property('data');",
									"        pm.expect(jsonData).to.have.property('meta');",
									"    });",
									"    ",
									"    pm.test(\"Meta contains the search query\", function () {",
									"        pm.expect(jsonData.meta).to.have.property('query');",
									"        pm.expect(jsonData.meta.query).to.have.property('title');",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/movies?title=batman",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies"
							],
							"query": [
								{
									"key": "title",
									"value": "batman"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Status code is 200 or 404",
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect([200, 404]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // Test 2: Meta contains rating filter",
									"    pm.test(\"Meta contains rating filter\", function () {",
									"        pm.expect(jsonData.meta.query).to.have.property('rating');",
									"        pm.expect(jsonData.meta.query.rating).to.equal('PG-13');",
									"    });",
									"    ",
									"    // Test 3: All movies have correct rating",
									"    if (jsonData.data.length > 0) {",
									"        pm.test(\"All movies have PG-13 rating\", function () {",
									"            jsonData.data.forEach(movie => {",
									"                pm.expect(movie.mpa_rating).to.equal('PG-13');",
									"            });",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/movies?rating=PG-13",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies"
							],
							"query": [
								{
									"key": "rating",
									"value": "PG-13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Multi-Filter Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Status code is 200 or 404",
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect([200, 404]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // Test 2: Meta contains all filters",
									"    pm.test(\"Meta contains all applied filters\", function () {",
									"        pm.expect(jsonData.meta.query).to.have.property('genre');",
									"        pm.expect(jsonData.meta.query).to.have.property('year');",
									"        pm.expect(jsonData.meta.query).to.have.property('rating');",
									"    });",
									"    ",
									"    // Test 3: Results match all criteria",
									"    if (jsonData.data.length > 0) {",
									"        pm.test(\"Results match all filter criteria\", function () {",
									"            jsonData.data.forEach(movie => {",
									"                pm.expect(movie.mpa_rating).to.equal('PG-13');",
									"                const year = new Date(movie.release_date).getFullYear();",
									"                pm.expect(year).to.equal(2020);",
									"            });",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/movies?genre=Action&year=2020&rating=PG-13",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies"
							],
							"query": [
								{
									"key": "genre",
									"value": "Action"
								},
								{
									"key": "year",
									"value": "2020"
								},
								{
									"key": "rating",
									"value": "PG-13"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Movies - POST",
			"item": [
				{
					"name": "Add Single Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains new movie ID\", function () {",
									"    pm.expect(jsonData).to.have.property('movie_id');",
									"    pm.expect(jsonData.movie_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.a('string');",
									"});",
									"",
									"if (jsonData.movie_id) {",
									"    pm.collectionVariables.set('testMovieId', jsonData.movie_id.toString());",
									"    console.log('New movie ID saved:', jsonData.movie_id);",
									"}",
									"",
									"pm.test(\"Response time is reasonable (< 3000ms)\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Movie Created by Postman\",\n  \"original_title\": \"Test Movie Created by Postman\",\n  \"release_date\": \"2024-01-15\",\n  \"runtime_minutes\": 120,\n  \"overview\": \"This is a test movie created to validate the POST endpoint.\",\n  \"budget\": 10000000,\n  \"revenue\": 25000000,\n  \"mpa_rating\": \"PG-13\",\n  \"genres\": [\"Action\", \"Thriller\"],\n  \"directors\": [\"Test Director\"],\n  \"studios\": [\n    {\n      \"studio_name\": \"Test Studio\",\n      \"country\": \"United States\"\n    }\n  ],\n  \"cast\": [\n    {\n      \"actor_name\": \"Test Actor 1\",\n      \"character_name\": \"Main Character\",\n      \"actor_order\": 1\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/movies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Movies - PATCH",
			"item": [
				{
					"name": "Partial Update Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"// Test 2: Response indicates success",
									"pm.test(\"Response indicates success\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"// Test 3: Response contains movie_id",
									"pm.test(\"Response contains movie_id\", function () {",
									"    pm.expect(jsonData).to.have.property('movie_id');",
									"});",
									"",
									"// Test 4: Response contains message",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"revenue\": 35000000,\n  \"overview\": \"Partially updated overview via PATCH request.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/movies/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Cast Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"// Test 2: Response indicates success",
									"pm.test(\"Response indicates success\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"// Test 3: Response contains cast_count",
									"pm.test(\"Response contains cast count\", function () {",
									"    pm.expect(jsonData).to.have.property('cast_count');",
									"    pm.expect(jsonData.cast_count).to.be.a('number');",
									"});",
									"",
									"// Test 4: Cast count doesn't exceed 10",
									"pm.test(\"Cast count doesn't exceed maximum of 10\", function () {",
									"    pm.expect(jsonData.cast_count).to.be.at.most(10);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cast\": [\n    {\n      \"actor_name\": \"Updated Actor 1\",\n      \"character_name\": \"Hero\",\n      \"actor_order\": 1\n    },\n    {\n      \"actor_name\": \"Updated Actor 2\",\n      \"character_name\": \"Villain\",\n      \"actor_order\": 2\n    },\n    {\n      \"actor_name\": \"Updated Actor 3\",\n      \"character_name\": \"Sidekick\",\n      \"actor_order\": 3\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/movies/:id/cast",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies",
								":id",
								"cast"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Movies - PUT",
			"item": [
				{
					"name": "Update Movie (Complete)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"// Test 2: Response indicates success",
									"pm.test(\"Response indicates success\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"// Test 3: Response contains movie_id",
									"pm.test(\"Response contains movie_id\", function () {",
									"    pm.expect(jsonData).to.have.property('movie_id');",
									"});",
									"",
									"// Test 4: Response contains message",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Test Movie\",\n  \"original_title\": \"Updated Test Movie\",\n  \"release_date\": \"2024-01-15\",\n  \"runtime_minutes\": 125,\n  \"overview\": \"This movie has been updated via PUT request.\",\n  \"budget\": 12000000,\n  \"revenue\": 30000000,\n  \"mpa_rating\": \"R\",\n  \"genres\": [\"Action\", \"Drama\"],\n  \"directors\": [\"Updated Director\"],\n  \"studios\": [\n    {\n      \"studio_name\": \"Updated Studio\",\n      \"country\": \"United States\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/movies/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Movies - DELETE",
			"item": [
				{
					"name": "Delete Movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains deleted movie information\", function () {",
									"    pm.expect(jsonData).to.have.property('deleted_movie');",
									"    pm.expect(jsonData.deleted_movie).to.be.an('object');",
									"    pm.expect(jsonData.deleted_movie).to.have.property('movie_id');",
									"    pm.expect(jsonData.deleted_movie).to.have.property('title');",
									"});",
									"",
									"pm.test(\"Response contains warning about permanence\", function () {",
									"    pm.expect(jsonData).to.have.property('warning');",
									"    pm.expect(jsonData.warning).to.include('cannot be undone');",
									"});",
									"",
									"pm.test(\"Response contains deletion message\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('deleted');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/movies/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"movies",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api"
		},
		{
			"key": "apiKey",
			"value": ""
		},
		{
			"key": "testMovieId",
			"value": ""
		},
		{
			"key": "testStudioId",
			"value": "1"
		},
		{
			"key": "testDirectorId",
			"value": "1"
		},
		{
			"key": "testActorId",
			"value": "1"
		},
		{
			"key": "testCollectionId",
			"value": "1"
		}
	]
}