openapi: 3.0.3
info:
  title: Movie Database API
  description: |
    Comprehensive RESTful API for managing movies, actors, directors, studios, and collections.
    
    ## Features
    - Complete CRUD operations for movies
    - Advanced filtering and search capabilities
    - API Key authentication
    - Pagination support
    - Bulk import functionality
    - Rate limiting (1000 requests/hour per API key)
    
    ## Authentication
    Most endpoints require a valid API key. Generate your API key at `/api/api-key` and include it in the `X-API-Key` header.
    
    **Example:**
    ```
    X-API-Key: your-api-key-here
    ```
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://tcss460-api.onrender.com
    description: Production server

tags:
  - name: System
    description: System health and information endpoints
  - name: API Key Management
    description: Generate and manage API keys
  - name: Movies
    description: Movie CRUD operations and queries
  - name: Studios
    description: Studio-related movie queries
  - name: Directors
    description: Director-related movie queries
  - name: Actors
    description: Actor-related movie queries
  - name: Collections
    description: Collection/franchise-related movie queries

security:
  - ApiKeyAuth: []

paths:
  /api/api-info:
    get:
      tags:
        - System
      summary: Get API information
      description: Returns basic information about the API
      security: []
      responses:
        '200':
          description: API information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "TCSS 460 API"
                  version:
                    type: string
                    example: "1.0.0"
                  description:
                    type: string
                    example: "RESTful API for movies"

  /api/health:
    get:
      tags:
        - System
      summary: Health check
      description: Checks if the API is running and database is accessible
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Database is working!"
                  timestamp:
                    type: string
                    format: date-time

  /api/api-key:
    get:
      tags:
        - API Key Management
      summary: Get API key generation form
      description: Returns an HTML form for generating API keys through a web browser
      security: []
      responses:
        '200':
          description: HTML form returned successfully
          content:
            text/html:
              schema:
                type: string
                example: "<!DOCTYPE html>..."
    
    post:
      tags:
        - API Key Management
      summary: Generate a new API key
      description: |
        Creates a new API key with the provided name and optional email.
        The API key is returned only once and cannot be retrieved again.
        
        **Important:** Save the API key securely immediately after generation.
        
        **Rate Limit:** 1000 requests per hour per key
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  description: Name of the person, application, or organization
                  example: "My Application"
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: Optional contact email
                  example: "developer@example.com"
      responses:
        '201':
          description: API key generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  api_key:
                    type: string
                    description: The generated API key (shown only once)
                    example: "abc123def456ghi789jkl012mno345pqr678stu"
                  name:
                    type: string
                    example: "My Application"
                  email:
                    type: string
                    example: "developer@example.com"
                  rate_limit:
                    type: integer
                    example: 1000
                  created_at:
                    type: string
                    format: date-time
                  message:
                    type: string
                    example: "API key generated successfully"
                  important_notice:
                    type: string
                    example: "SAVE THIS KEY SECURELY - It will not be shown again..."
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/api-key/info:
    get:
      tags:
        - API Key Management
      summary: Get API key information
      description: Returns information about the authenticated API key
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: API key information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  api_key_info:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                        nullable: true
                      rate_limit:
                        type: integer
                      created_at:
                        type: string
                        format: date-time
                      last_used_at:
                        type: string
                        format: date-time
                        nullable: true
                      expires_at:
                        type: string
                        format: date-time
                        nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/movies:
    get:
      tags:
        - Movies
      summary: Get all movies with filtering
      description: |
        Retrieves movies with comprehensive filtering options. All filters can be combined.
        
        **Available Filters:**
        - Title search (substring match)
        - Year filter
        - Genre filter
        - MPA rating filter
        - Actor filter
        - Director filter
        - Studio filter
        - Collection filter
        - Budget range (min/max)
        - Revenue range (min/max)
        - Date range (start/end)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: title
          in: query
          description: Search by movie title (case-insensitive substring match)
          schema:
            type: string
            minLength: 2
          example: "batman"
        - name: year
          in: query
          description: Filter by release year
          schema:
            type: integer
            minimum: 1800
          example: 2020
        - name: genre
          in: query
          description: Filter by genre name (exact match)
          schema:
            type: string
          example: "Action"
        - name: rating
          in: query
          description: Filter by MPA rating
          schema:
            type: string
            enum: ["G", "PG", "PG-13", "R", "NC-17", "NR"]
          example: "PG-13"
        - name: actor
          in: query
          description: Filter by actor name (partial match)
          schema:
            type: string
          example: "Tom Hanks"
        - name: director
          in: query
          description: Filter by director name (partial match)
          schema:
            type: string
          example: "Christopher Nolan"
        - name: studio
          in: query
          description: Filter by studio name (partial match)
          schema:
            type: string
          example: "Warner Bros"
        - name: collection
          in: query
          description: Filter by collection name (partial match)
          schema:
            type: string
          example: "Marvel"
        - name: minBudget
          in: query
          description: Minimum budget filter
          schema:
            type: integer
            minimum: 0
          example: 1000000
        - name: maxBudget
          in: query
          description: Maximum budget filter
          schema:
            type: integer
            minimum: 0
          example: 50000000
        - name: minRevenue
          in: query
          description: Minimum revenue filter
          schema:
            type: integer
            minimum: 0
          example: 10000000
        - name: maxRevenue
          in: query
          description: Maximum revenue filter
          schema:
            type: integer
            minimum: 0
          example: 100000000
        - name: startDate
          in: query
          description: Release date range start (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2020-01-01"
        - name: endDate
          in: query
          description: Release date range end (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2020-12-31"
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

    post:
      tags:
        - Movies
      summary: Add a new movie
      description: Creates a new movie with all related data (genres, directors, cast, etc.)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInput'
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/movies/bulk:
    post:
      tags:
        - Movies
      summary: Bulk import movies
      description: Import multiple movies in a single request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movies
              properties:
                movies:
                  type: array
                  items:
                    $ref: '#/components/schemas/MovieInput'
                  minItems: 1
      responses:
        '201':
          description: All movies imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkImportResponse'
        '207':
          description: Partial success - some movies failed to import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkImportResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/movies/{id}:
    get:
      tags:
        - Movies
      summary: Get movie by ID
      description: Retrieves a single movie by its unique ID
      parameters:
        - $ref: '#/components/parameters/MovieIdParam'
      responses:
        '200':
          description: Movie retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

    put:
      tags:
        - Movies
      summary: Update movie (complete)
      description: Completely replaces a movie's data
      parameters:
        - $ref: '#/components/parameters/MovieIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInput'
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

    patch:
      tags:
        - Movies
      summary: Update movie (partial)
      description: Updates only the provided fields
      parameters:
        - $ref: '#/components/parameters/MovieIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInput'
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

    delete:
      tags:
        - Movies
      summary: Delete movie
      description: Permanently deletes a movie and all related data
      parameters:
        - $ref: '#/components/parameters/MovieIdParam'
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  deleted_movie:
                    $ref: '#/components/schemas/Movie'
                  warning:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/movies/{id}/cast:
    patch:
      tags:
        - Movies
      summary: Update movie cast
      description: Replaces the cast for a specific movie (max 10 actors)
      parameters:
        - $ref: '#/components/parameters/MovieIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cast
              properties:
                cast:
                  type: array
                  items:
                    $ref: '#/components/schemas/CastMember'
                  maxItems: 10
      responses:
        '200':
          description: Cast updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  movie_id:
                    type: integer
                  message:
                    type: string
                  cast_count:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/studios/{id}/movies:
    get:
      tags:
        - Studios
      summary: Get movies by studio ID
      description: Retrieves all movies produced by a specific studio
      parameters:
        - name: id
          in: path
          required: true
          description: Studio ID
          schema:
            type: integer
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/studios/name/{name}/movies:
    get:
      tags:
        - Studios
      summary: Get movies by studio name
      description: Retrieves all movies by studio name (partial match)
      parameters:
        - name: name
          in: path
          required: true
          description: Studio name (URL encoded)
          schema:
            type: string
          example: "Warner Bros"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/directors/{id}/movies:
    get:
      tags:
        - Directors
      summary: Get movies by director ID
      description: Retrieves all movies directed by a specific director
      parameters:
        - name: id
          in: path
          required: true
          description: Director ID
          schema:
            type: integer
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/directors/name/{name}/movies:
    get:
      tags:
        - Directors
      summary: Get movies by director name
      description: Retrieves all movies by director name (partial match)
      parameters:
        - name: name
          in: path
          required: true
          description: Director name (URL encoded)
          schema:
            type: string
          example: "Christopher Nolan"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/actors/{id}/movies:
    get:
      tags:
        - Actors
      summary: Get movies by actor ID
      description: Retrieves all movies featuring a specific actor
      parameters:
        - name: id
          in: path
          required: true
          description: Actor ID
          schema:
            type: integer
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/actors/name/{name}/movies:
    get:
      tags:
        - Actors
      summary: Get movies by actor name
      description: Retrieves all movies by actor name (partial match)
      parameters:
        - name: name
          in: path
          required: true
          description: Actor name (URL encoded)
          schema:
            type: string
          example: "Tom Hanks"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/collections/{id}/movies:
    get:
      tags:
        - Collections
      summary: Get movies by collection ID
      description: Retrieves all movies in a specific collection/franchise
      parameters:
        - name: id
          in: path
          required: true
          description: Collection ID
          schema:
            type: integer
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/collections/name/{name}/movies:
    get:
      tags:
        - Collections
      summary: Get movies by collection name
      description: Retrieves all movies by collection name (partial match)
      parameters:
        - name: name
          in: path
          required: true
          description: Collection name (URL encoded)
          schema:
            type: string
          example: "Marvel Cinematic Universe"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key authentication. Generate your API key at `/api/api-key` and include it in the `X-API-Key` header.
        
        Rate limit: 1000 requests per hour per key.

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1

    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20

    MovieIdParam:
      name: id
      in: path
      required: true
      description: Movie ID
      schema:
        type: integer
        minimum: 1
      example: 1

  schemas:
    Movie:
      type: object
      properties:
        movie_id:
          type: integer
        title:
          type: string
        original_title:
          type: string
        directors:
          type: string
          description: Comma-separated list of directors
        genres:
          type: string
          description: Comma-separated list of genres
        release_date:
          type: string
          format: date
        runtime_minutes:
          type: integer
        overview:
          type: string
        budget:
          type: integer
          format: int64
        revenue:
          type: integer
          format: int64
        mpa_rating:
          type: string
        poster_url:
          type: string
          format: uri
        backdrop_url:
          type: string
          format: uri

    MovieInput:
      type: object
      required:
        - title
        - original_title
        - release_date
        - runtime_minutes
        - overview
        - mpa_rating
        - genres
      properties:
        title:
          type: string
          minLength: 1
        original_title:
          type: string
          minLength: 1
        release_date:
          type: string
          format: date
        runtime_minutes:
          type: integer
          minimum: 1
        overview:
          type: string
        budget:
          type: integer
          minimum: 0
        revenue:
          type: integer
          minimum: 0
        mpa_rating:
          type: string
        collection_name:
          type: string
          nullable: true
        poster_url:
          type: string
          format: uri
          nullable: true
        backdrop_url:
          type: string
          format: uri
          nullable: true
        genres:
          type: array
          items:
            type: string
          minItems: 1
        directors:
          type: array
          items:
            type: string
        producers:
          type: array
          items:
            type: string
        studios:
          type: array
          items:
            $ref: '#/components/schemas/Studio'
        cast:
          type: array
          items:
            $ref: '#/components/schemas/CastMember'
          maxItems: 10

    Studio:
      type: object
      required:
        - studio_name
      properties:
        studio_name:
          type: string
        logo_url:
          type: string
          format: uri
          nullable: true
        country:
          type: string
          nullable: true

    CastMember:
      type: object
      required:
        - actor_name
        - actor_order
      properties:
        actor_name:
          type: string
        character_name:
          type: string
          nullable: true
        actor_order:
          type: integer
          minimum: 1
        profile_url:
          type: string
          format: uri
          nullable: true

    MovieListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
        meta:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
            pages:
              type: integer
            hasNextPage:
              type: boolean
            hasPreviousPage:
              type: boolean
            query:
              type: object
              additionalProperties: true

    MovieCreateResponse:
      type: object
      properties:
        success:
          type: boolean
        movie_id:
          type: integer
        message:
          type: string

    MovieUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
        movie_id:
          type: integer
        message:
          type: string

    BulkImportResponse:
      type: object
      properties:
        success:
          type: boolean
        total_processed:
          type: integer
        successful:
          type: integer
        failed:
          type: integer
        results:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              success:
                type: boolean
              movie_id:
                type: integer
              error:
                type: string

    Error:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        errors:
          type: array
          items:
            type: object

  responses:
    BadRequest:
      description: Bad request - Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 400
            message: "Validation error"
            timestamp: "2024-11-01T10:00:00.000Z"

    Unauthorized:
      description: Unauthorized - Missing or invalid API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 401
            message: "API key is required. Include X-API-Key header."
            timestamp: "2024-11-01T10:00:00.000Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 404
            message: "Movie not found"
            timestamp: "2024-11-01T10:00:00.000Z"

    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 429
              message:
                type: string
                example: "Rate limit exceeded. Please try again later."
              timestamp:
                type: string
                format: date-time

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 500
            message: "Internal server error"
            timestamp: "2024-11-01T10:00:00.000Z"