openapi: 3.0.3
info:
  title: TCSS 460 Movie API
  version: 1.0.0
  description: RESTful API for movies with comprehensive movie information including directors and genres
  contact:
    name: API Support
  license:
    name: MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://tcss460-api.onrender.com
    description: Production server

tags:
  - name: System
    description: System health and information endpoints
  - name: Authentication
    description: User authentication and registration
  - name: Movies
    description: Movie data operations

paths:
  /api-info:
    get:
      tags:
        - System
      summary: Get API information
      description: Returns basic information about the API including name, version, and documentation link
      operationId: getApiInfo
      responses:
        '200':
          description: API information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: TCSS 460 API
                  version:
                    type: string
                    example: 1.0.0
                  description:
                    type: string
                    example: RESTful API for movies
                  documentation:
                    type: string
                    example: /api-docs

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Checks if the database connection is working
      operationId: healthCheck
      responses:
        '200':
          description: Database is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Database is working!
        '500':
          description: Database connection failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Database connection failed

  /login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user with email and password, returns JWT tokens
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: User's password (minimum 8 characters)
                  example: password123
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: Refresh token stored in HTTP-only cookie
              schema:
                type: string
                example: refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '400':
          description: Bad request - validation error or user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validationError:
                  value:
                    statusCode: 400
                    message:
                      - code: invalid_type
                        message: email must be formatted as an email
                    timestamp: "2025-10-25T12:00:00.000Z"
                userNotFound:
                  value:
                    statusCode: 400
                    message: user does not exist
                    timestamp: "2025-10-25T12:00:00.000Z"
        '401':
          description: Unauthorized - incorrect credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                statusCode: 401
                message: incorrect login provided
                timestamp: "2025-10-25T12:00:00.000Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - role
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  description: Username (3-50 characters)
                  example: johndoe
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: User's password (minimum 8 characters)
                  example: securePassword123
                role:
                  type: string
                  enum:
                    - user
                    - admin
                  description: User role
                  example: user
      responses:
        '200':
          description: Registration successful
          headers:
            Set-Cookie:
              description: Refresh token stored in HTTP-only cookie
              schema:
                type: string
                example: refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                statusCode: 400
                message:
                  - code: too_small
                    message: username must be greater than 3 characters
                timestamp: "2025-10-25T12:00:00.000Z"
        '409':
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                statusCode: 400
                message: User with this email or username already exists
                timestamp: "2025-10-25T12:00:00.000Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /movies:
    get:
      tags:
        - Movies
      summary: Get all movies
      description: Retrieve a list of all movies, optionally filtered by release year
      operationId: getAllMovies
      parameters:
        - name: year
          in: query
          description: Filter movies by release year
          required: false
          schema:
            type: integer
            minimum: 1900
            maximum: 2100
          example: 2023
      responses:
        '200':
          description: List of movies retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request - invalid year parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                statusCode: 400
                message: year must be a number
                timestamp: "2025-10-25T12:00:00.000Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /movies/{id}:
    get:
      tags:
        - Movies
      summary: Get movie by ID
      description: Retrieve detailed information about a specific movie by its ID
      operationId: getMovieById
      parameters:
        - name: id
          in: path
          description: Movie ID
          required: true
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: Movie retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request - invalid ID parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                statusCode: 400
                message: id must be a number
                timestamp: "2025-10-25T12:00:00.000Z"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                statusCode: 404
                message: movie not found
                timestamp: "2025-10-25T12:00:00.000Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Movie:
      type: object
      properties:
        title:
          type: string
          description: Movie title
          example: The Shawshank Redemption
        original_title:
          type: string
          description: Original movie title
          example: The Shawshank Redemption
        directors:
          type: string
          description: Comma-separated list of director names
          example: Frank Darabont
          nullable: true
        genres:
          type: string
          description: Comma-separated list of genre names
          example: Drama, Crime
          nullable: true
        release_date:
          type: string
          format: date
          description: Movie release date
          example: "1994-09-23"
        runtime_minutes:
          type: integer
          description: Movie runtime in minutes
          example: 142
          nullable: true
        overview:
          type: string
          description: Movie plot summary
          example: Two imprisoned men bond over a number of years...
          nullable: true
        budget:
          type: integer
          format: int64
          description: Movie budget in dollars
          example: 25000000
          nullable: true
        revenue:
          type: integer
          format: int64
          description: Movie revenue in dollars
          example: 28341469
          nullable: true
        mpa_rating:
          type: string
          description: MPAA rating (G, PG, PG-13, R, NC-17)
          example: R
          nullable: true
        poster_url:
          type: string
          format: uri
          description: URL to movie poster image
          example: https://image.tmdb.org/t/p/w500/poster.jpg
          nullable: true
        backdrop_url:
          type: string
          format: uri
          description: URL to movie backdrop image
          example: https://image.tmdb.org/t/p/w500/backdrop.jpg
          nullable: true

    JwtResponse:
      type: object
      properties:
        username:
          type: string
          description: Username of authenticated user
          example: johndoe
        role:
          type: string
          enum:
            - user
            - admin
          description: User role
          example: user
        jwt:
          type: object
          properties:
            accessToken:
              type: string
              description: JWT access token
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6ImpvaG5kb2UiLCJyb2xlIjoidXNlciIsImlhdCI6MTYzMjE1MjAwMH0.xyz
            type:
              type: string
              description: Token type
              example: Bearer

    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 400
        message:
          oneOf:
            - type: string
            - type: object
            - type: array
          description: Error message or validation errors
          example: Bad request
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of when the error occurred
          example: "2025-10-25T12:00:00.000Z"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token for authenticated requests
    
    CookieAuth:
      type: apiKey
      in: cookie
      name: refresh-token
      description: Refresh token stored in HTTP-only cookie

security:
  - BearerAuth: []